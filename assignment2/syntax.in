<program> ::= <compoundstmt>

<compoundstmt> ::= begin <stmtlist> end
<stmtlist> ::= <statement>; | <statement>; <stmtlist>
<statement> ::= <assignstmt> | <declarationstmt> | <iostmt> | <ifstmt> | <forstmt> | <whilestmt> | <returnstmt> 

<assignstmt> ::= <identifier>=<expression> | <identifier>={<array_factor_int>}
<expression> ::= <expression> + <term> | <expression> - <term> | <term>
<term> ::= <term> * <factor> | <term> / <factor> | <factor>
<factor> ::= (<expression>) | <identifier> | <integer_const>
<array_factor_int> ::= <integer_const> | <array_factor_int>, <integer_const>

<declarationstmt> ::= <identifier>:<type> 
<type> ::= <simpletype> | <arraytype>
<simpletype> ::= int | char | string
<arraytype> ::= array[<simpletype>]

<iostmt> ::= read(<identifier>) | write(<identifier>) | write(<string_const>)

<ifstmt> ::= if(<condition>) then <compoundstmt> | if(<condition>) then <compoundstmt> else <compoundstatement>

<condition> ::= <expression><relation><expression>
<relation> ::= < | <= | == | != | >= | >

<forstmt> ::= for<forconditions><compoundstmt>
<forconditions> ::= (int <assignmentstmt>; <condition>;<assignmentstmt>)

<whilestmt> ::= while(<condition>) <compoundstmt>

<returnstmt> ::= return <expression>
