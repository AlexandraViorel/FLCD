
%{ 	 
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "lang.tab.h"

  int currentLine = 1;

  typedef struct {
    char* keyword;
    int token;
  } KeywordTokenMap;

  KeywordTokenMap keywordTokenMap[] = {
    {"begin", BEGIN_TOKEN},
    {"end", END},
    {"int", INT},
    {"char", CHAR},
    {"string", STRING},
    {"array", ARRAY},
    {"if", IF},
    {"then", THEN},
    {"else", ELSE},
    {"for", FOR},
    {"while", WHILE},
    {"read", READ},
    {"write", WRITE},
    {"return", RETURN_TOKEN},
    
    {"+", ADD},
    {"-", SUB},
    {"*", MUL},
    {"/", DIV},

    {"==", EQ},
    {"!=", NE},
    {"<", LT},
    {">", GT},
    {"<=", LE},
    {">=", GE},

    {"=", ASSIGN},

    {"{", OPEN_CURLY},
    {"}", CLOSE_CURLY},
    {"(", OPEN_BRACKET},
    {")", CLOSE_BRACKET},
    {"[", OPEN_SQUARE},
    {"]", CLOSE_SQUARE},

    {":", COLON},
    {";", SEMICOLON},
    {",", COMMA},
  };

  int mapKeywordToToken(char* keyword) 
  {
    int size = sizeof(keywordTokenMap) / sizeof(KeywordTokenMap);
    int i = 0;
    for (i = 0; i < size; i++) 
    {
      if (strcmp(keyword, keywordTokenMap[i].keyword) == 0) 
      {
        return keywordTokenMap[i].token;
      }
    }

    printf("Keyword not found: %s\n", keyword);
    return -1;
  }
%} 

%option noyywrap

IDENTIFIER		[a-zA-Z_][a-zA-Z0-9_]*
INTEGER_CONST	0|[+|-]?[1-9][0-9]*
STRING_CONST	[\"][a-zA-Z0-9_ ]+[\"]
CHAR_CONST		[\'][a-zA-Z0-9][\']

%%

"begin"|"end"|"int"|"char"|"string"|"array"|"if"|"then"|"else"|"for"|"while"|"read"|"write"|"return"		{printf("Reserved word: %s\n", yytext);}
"+"|"-"|"*"|"/"|"<="|">="|"=="|"!="|"<"|">"|"="		{printf("Operator: %s\n", yytext);}
"{"|"}"|"("|")"|"["|"]"|":"|";"|","		{printf("Separator: %s\n", yytext);}
{IDENTIFIER}		{printf("Identifier: %s\n", yytext);}
{INTEGER_CONST}		{printf("Integer: %s\n", yytext);}
{STRING_CONST}		{printf("String: %s\n", yytext);}
{CHAR_CONST}		{printf("Character: %s\n", yytext);}

[ \t]+		{}
[\n]+	{currentLine++;}

[0-9][a-zA-Z0-9_]*		{printf("Illegal identifier at line %d\n", currentLine);}
[+|-]0		{printf("Illegal numeric constant at line %d\n", currentLine);}
[\'][a-zA-Z0-9 ]{2,}[\']|[\'][a-zA-Z0-9 ][a-zA-Z0-9 ][\']		{printf("Illegal character constant at line %d\n", currentLine);}
[\"][a-zA-Z0-9_]+|[a-zA-Z0-9_]+[\"]		{printf("Illegal string constant at line %d\n", currentLine);}

%%